<?phpfunction chess_formgameinfo($user1, $user2){	$gameinfo = 		array(			"A1" => "WR", "B1" => "WH", "C1" => "WB", "D1" => "WQ", "E1" => "WK", "F1" => "WB", "G1" => "WH", "H1" => "WR", 			"A2" => "WP", "B2" => "WP", "C2" => "WP", "D2" => "WP", "E2" => "WP", "F2" => "WP", "G2" => "WP", "H2" => "WP", 			"A7" => "BP", "B7" => "BP", "C7" => "BP", "D7" => "BP", "E7" => "BP", "F7" => "BP", "G7" => "BP", "H7" => "BP", 			"A8" => "BR", "B8" => "BH", "C8" => "BB", "D8" => "BQ", "E8" => "BK", "F8" => "BB", "G8" => "BH", "H8" => "BR", 		);	$gameinfos = serialize($gameinfo);		$minuser = min($user1, $user2);	$maxuser = max($user1, $user2);	$now = date("Y-m-d H:i:s");		$sql = "INSERT INTO ".db_prefix("chess"). " VALUES ('', $minuser, $maxuser, '$now', '$now', '$gameinfos', $user1)";	db_query($sql);		$sql = "SELECT gameid FROM ".db_prefix("chess")." WHERE user1 = $minuser AND user2 = $maxuser";	$res = db_query($sql);	$row = db_fetch_assoc($res);	$gameid = $row['gameid'];		$sql = "INSERT INTO ".db_prefix("chess_saved"). " VALUES ($gameid, '$minuser', '$maxuser', '$now', '', '')";	db_query($sql);		$FileName = "gamelog".$gameid.".txt";	$FileHandle = fopen("modules/chess/logs/".$FileName, "w");	fclose($FileHandle);}function chess_drawboard($chessgameid, $replay=false, $watch=false){		global $session;	require_once("lib/commentary.php");		if ($replay){		$db = "chess_saved";		$gi = "";	} else {		$db = "chess";		$gi = ",gameinfo";	}		$sql = "SELECT user1,user2,turn,lastmoves$gi FROM ".db_prefix($db)." WHERE gameid = $chessgameid";	$res = db_query($sql);	$row = db_fetch_assoc($res);	$lastmoves = $row['lastmoves'];	$user1 = $row['user1'];	$user2 = $row['user2'];		if ($replay){		$content = file_get_contents("modules/chess/logs/gamelog".$chessgameid.".txt");		$content_a = explode("|^|",$content);		if (!is_numeric($replay)){			$gameinfo = array(				"A1" => "WR", "B1" => "WH", "C1" => "WB", "D1" => "WQ", "E1" => "WK", "F1" => "WB", "G1" => "WH", "H1" => "WR", 				"A2" => "WP", "B2" => "WP", "C2" => "WP", "D2" => "WP", "E2" => "WP", "F2" => "WP", "G2" => "WP", "H2" => "WP", 				"A7" => "BP", "B7" => "BP", "C7" => "BP", "D7" => "BP", "E7" => "BP", "F7" => "BP", "G7" => "BP", "H7" => "BP", 				"A8" => "BR", "B8" => "BH", "C8" => "BB", "D8" => "BQ", "E8" => "BK", "F8" => "BB", "G8" => "BH", "H8" => "BR", 			);		} else {			$gameinfo = unserialize($content_a[$replay-1]);		}	} else {		$gameinfo = unserialize($row['gameinfo']);	}		$color = get_module_pref('color');	$alpha = array("&nbsp;", "A", "B", "C", "D", "E", "F", "G", "H", "&nbsp;");		if (!$replay && !$watch){		if (!chess_checkking($gameinfo)) output("`\$`bYOU ARE IN CHECK!`b`0`n");	}		if ($row['turn'] == $session['user']['acctid']){		rawoutput("<form action='runmodule.php?module=chess&op=play&move=1' method='post'>");		addnav("", "runmodule.php?module=chess&op=play&move=1");		rawoutput("Move: <input name='move1' size='15' />");		rawoutput("To: <input name='move2' size='15' />");		rawoutput("<input type='submit' value='".translate_inline("Move!")."' />");		rawoutput("</form>");	}	if (!$replay){		if (!$watch){			output("`&You are color `b%s`b`&!",$color=="W"?"`&White":"`~Black");		} else {			$thisturn = get_module_pref('color', false, $row['turn']);			output("`&Current turn: `b%s`b`&",$thisturn=="W"?"`&White":"`~Black");		}	} else {		$sql0 = "			SELECT a1.name AS name1, a2.name AS name2			  FROM ".db_prefix("chess_saved")." AS cs			LEFT JOIN ".db_prefix("accounts")." AS a1			  ON a1.acctid = cs.user1			LEFT JOIN ".db_prefix("accounts")." AS a2			  ON a2.acctid = cs.user2			WHERE cs.gameid = $chessgameid";		$res0 = db_query($sql0);		$row0 = db_fetch_assoc($res0);		output("`&Game replay between %s`& and %s`&. Move Number %s.", $row0['name1'], $row0['name2'], httpget('move'));		if (httpget('move') == count($content_a)) output('`$`bLast move`b.`0');	}		$timeturn = (strtotime($lastmoves) + get_module_setting('inactive')) - strtotime("now");		if (!$replay){		if (!$watch && $timeturn <= 0){			require_once("lib/redirect.php");			redirect("runmodule.php?module=chess&op=forfeit&confirm=1&timeout=1");		}				rawoutput("<div id='timer' style='color:red;font-size:20px'>Time Left: <span id='chesstimer'>Loading..</span></div><br />");				rawoutput("			<script type=\"text/javascript\">				var ch_secs = $timeturn;				function chesstimeleft () {					var timedis = '';					if (ch_secs > 0){						var hours = Math.floor(ch_secs/3600);						var remainder = ch_secs - (hours * 3600);						var minutes = Math.floor(remainder/60);						var seconds = remainder - (minutes * 60);						if (seconds < 10) seconds = '0' + seconds;												timedis = timedis + seconds + \"s\";						if (hours + minutes > 0) { timedis = minutes + \"m \" + timedis; }						if (hours > 0) { timedis = hours + \"h \" + timedis; }												ch_secs--;						setTimeout(chesstimeleft,1000);					} else {						timedis = 'TIME UP!';					}					document.getElementById('chesstimer').innerHTML = timedis;				}				chesstimeleft();			</script>		");	}		rawoutput("<table>");	for ($i=0; $i<10; $i++){		rawoutput("<tr>");		for ($j=0; $j<10; $j++){			if (!$i || !$j || $i==9 || $j==9){				if ((!$i || $i==9) && (!$j || $j==9)) { $h = "30"; $w = "30"; }				if ((!$i || $i==9) && ($j>0 && $j<9)) { $h = "30"; $w = "60"; }				if ((!$j || $j==9) && ($i>0 && $i<9)) { $h = "60"; $w = "30"; }				$bgcolor = '#000000';			} else {				$w = $h = "60";				$bgcolor = (($i+$j)%2?'#E6A875':'#FFFFE5');			}			rawoutput("<td align='center' width='$w' height='$h' bgcolor='$bgcolor'>");				if (!$i || $i==9){					output_notl($alpha[$j],TRUE);				} elseif ($i && (!$j || $j==9)){					output_notl($i);				} elseif (isset($gameinfo[$alpha[$j].$i])){					list($c, $p) = str_split($gameinfo[$alpha[$j].$i]);					if (get_module_pref('user_image')) output_notl("<img src='modules/chess/images/$c$p.png' alt='$c$p' />",TRUE);					else output_notl("<span style='font-size:40px' class='".($c=="B"?"colBlack":"colDkWhite")."'>$p</span>",TRUE);				} else {					output("&nbsp;",TRUE);				}			rawoutput("</td>");		}		rawoutput("</tr>");	}	rawoutput("</table><br />");		addcommentary();	commentdisplay("", "chess-$chessgameid","",25,"posts");}function chess_checkmove($move1, $move2, $chessgameid){	if  (strlen($move1) != 2 	|| strlen($move2) != 2 || 		!ctype_alpha($move1[0]) || !ctype_alpha($move2[0]) || 		!is_numeric($move1[1]) 	|| !is_numeric($move2[1])){		output("`\$Invalid input!`0`n");		return true;	}		global $session;		$color = get_module_pref('color');	$current = get_module_pref('current');		list ($move1a, $move1n) = str_split($move1);	list ($move2a, $move2n) = str_split($move2);	$move1a = strtoupper($move1a);	$move2a = strtoupper($move2a);	$move1 = $move1a.$move1n;	$move2 = $move2a.$move2n;		$sql = "SELECT gameinfo,lastmoves FROM ".db_prefix("chess")." WHERE gameid = $chessgameid";	$res = db_query($sql);	$row = db_fetch_assoc($res);	$gameinfo = unserialize($row['gameinfo']);	$lastmoves = $row['lastmoves'];		$alpha = array("", "A", "B", "C", "D", "E", "F", "G", "H");	$move1aN = array_search($move1a, $alpha);	$move2aN = array_search($move2a, $alpha);		if ($move1n < 1 || $move1n > 8 || !in_array($move1a, $alpha)){		output("`\$The square %s does not exist!`0`n",$move1);	} elseif ($move2n < 1 || $move2n > 8 || !in_array($move2a, $alpha)){		output("`\$The square %s does not exist!`0`n",$move2);	} elseif (!array_key_exists($move1, $gameinfo)){		output("`\$No piece exists in the %s square!`0`n",$move1);	} else {		$piecetomove0 = $gameinfo[$move1];		$piecetomove = $piecetomove0[1];		if ($piecetomove0[0] != $color){			output("`\$Not your color!`0`n");		} else {			$hmove = abs($move2aN - $move1aN);			$vmove = abs($move2n - $move1n);			$validmove = false;			$check = false;			switch ($piecetomove){				case "P":					if ($color == "W") { $r = 2; $o = 1; } else { $r = 7; $o = -1; }										if (!$hmove && ($move2n - $move1n==$o) && !isset($gameinfo[$move1a.($move1n+$o)])) $validmove = true;					elseif (!$hmove && $vmove==2 && $move1n == $r && !isset($gameinfo[$move1a.($move1n+$o)]) && !isset($gameinfo[$move1a.($move1n+(2*$o))])) $validmove = true;					elseif (isset($gameinfo[$move2]) && ($move2n - $move1n==$o) && $hmove==1) $validmove = true;				break;				case "R":					if ($hmove && !$vmove){						$validmove = true;						if ($move2aN - $move1aN > 0){							for ($i = $move1aN+1; $i < $move2aN; $i++){								if (isset($gameinfo[$alpha[$i].$move2n])) $validmove = false;							}						} else {							for ($i = $move1aN-1; $i > $move2aN; $i--){								if (isset($gameinfo[$alpha[$i].$move2n])) $validmove = false;							}						}					} elseif ($vmove && !$hmove) {						$validmove = true;						if ($move2n - $move1n > 0){							for ($i = $move1n+1; $i < $move2n; $i++){								if (isset($gameinfo[$move2a.$i])) $validmove = false;							}						} else {							for ($i = $move1n-1; $i > $move2n; $i--){								if (isset($gameinfo[$move2a.$i])) $validmove = false;							}						}					}				break;				case "H":					if (($vmove + $hmove == 3) && $vmove && $hmove) $validmove = true;				break;				case "B":					if ($hmove == $vmove){						$hmove0 = $move2aN - $move1aN;						$vmove0 = $move2n - $move1n;						$hslope = $hmove/$hmove0;						$vslope = $vmove/$vmove0;						$validmove = true;						for ($i = 1; $i < $vmove; $i++){							$k = $alpha[$move1aN+($i*$hslope)] . ($move1n+($i*$vslope));							if (isset($gameinfo[$k])) $validmove = false;						}					}				break;				case "Q":					if ($hmove && !$vmove){						$validmove = true;						if ($move2aN - $move1aN > 0){							for ($i = $move1aN+1; $i < $move2aN; $i++){								if (isset($gameinfo[$alpha[$i].$move2n])) $validmove = false;							}						} else {							for ($i = $move1aN-1; $i > $move2aN; $i--){								if (isset($gameinfo[$alpha[$i].$move2n])) $validmove = false;							}						}					} elseif ($vmove && !$hmove) {						$validmove = true;						if ($move2n - $move1n > 0){							for ($i = $move1n+1; $i < $move2n; $i++){								if (isset($gameinfo[$move2a.$i])) $validmove = false;							}						} else {							for ($i = $move1n-1; $i > $move2n; $i--){								if (isset($gameinfo[$move2a.$i])) $validmove = false;							}						}					} elseif ($hmove == $vmove){						$hmove0 = $move2aN - $move1aN;						$vmove0 = $move2n - $move1n;						$hslope = $hmove/$hmove0;						$vslope = $vmove/$vmove0;						$validmove = true;						for ($i = 1; $i < $vmove; $i++){							$k = $alpha[$move1aN+($i*$hslope)] . ($move1n+($i*$vslope));							if (isset($gameinfo[$k])) $validmove = false;						}					}				break;				case "K":					if (($vmove==1 || $hmove==1) && ($hmove+$vmove<=2)) $validmove = true;				break;			}			if ($validmove){				$gameinfo_copy = $gameinfo;				unset($gameinfo_copy[$move1]);				$gameinfo_copy[$move2] = $color.$piecetomove;				$validmove = chess_checkking($gameinfo_copy);				if (!$validmove){					output("`\$`bTHAT MOVE WILL PUT YOU IN CHECK!`b`0`n");					$check = true;				}			}			if ($gameinfo[$move2][0] == $color) $validmove = false;			if ($validmove){				if ($color == "W") $e = 8; else $e = 1;				unset($gameinfo[$move1]);				$gameinfo[$move2] = $color.$piecetomove;				if ($piecetomove=="P" && $move2n==$e) $gameinfo[$move2] = $color."Q";								$gameinfos = serialize($gameinfo);				$lastmoves = date("Y-m-d H:i:s");				db_query("UPDATE ".db_prefix("chess")." SET gameinfo = '$gameinfos', turn = $current, lastmoves = '$lastmoves' WHERE gameid = $chessgameid");								$FileName = "gamelog".$chessgameid.".txt";								$content = file_get_contents("modules/chess/logs/".$FileName);				if ($content > "") $content .= "|^|";				$content .= $gameinfos;								$FileHandle = fopen("modules/chess/logs/".$FileName, "w");				fwrite($FileHandle, $content);				fclose($FileHandle);			} else {				if (!$check) output("`\$Not a valid move!`0`n");			}		}	}}function chess_checkking($gameinfo){	$color = get_module_pref('color');	$opcolor = ($color == "W" ? "B" : "W");	$yourking = array_search($color."K", $gameinfo);		list ($move_a, $move_n) = str_split($yourking);		$alpha = array("", "A", "B", "C", "D", "E", "F", "G", "H");	$move_aN = array_search($move_a, $alpha);		$knights = array();		$knights[$alpha[$move_aN-2].($move_n-1)] = $opcolor."H";	$knights[$alpha[$move_aN-2].($move_n+1)] = $opcolor."H";	$knights[$alpha[$move_aN+2].($move_n-1)] = $opcolor."H";	$knights[$alpha[$move_aN+2].($move_n+1)] = $opcolor."H";	$knights[$alpha[$move_aN-1].($move_n-2)] = $opcolor."H";	$knights[$alpha[$move_aN-1].($move_n+2)] = $opcolor."H";	$knights[$alpha[$move_aN+1].($move_n-2)] = $opcolor."H";	$knights[$alpha[$move_aN+1].($move_n+2)] = $opcolor."H";		foreach ($knights as $key=>$val){		if ($gameinfo[$key] == $val) return false;	}		// Check vertically up	if ($move_n > 1){		for ($i = $move_n-1; $i > 0; $i--){			$key = $move_a.$i;			$pce = $gameinfo[$key][1];			if (!isset($gameinfo[$key])){				continue;			} elseif ($gameinfo[$key][0] == $color) {				break;			} elseif ($gameinfo[$key][0] != $color) {				if ($pce == "Q" || ($pce == "R") || ($i == $move_n-1 && $pce == "K")) {					return false;				} else {					break;				}			} 		}	}		// Check diagonally left-up	if ($move_aN > 1 && $move_n > 1){		for ($i = 1; $i < 8; $i++){			if ($move_aN-$i < 1 || $move_n-$i < 1) break;			$key = $alpha[$move_aN-$i].($move_n-$i);			$pce = $gameinfo[$key][1];			if (!isset($gameinfo[$key])){				continue;			} elseif ($gameinfo[$key][0] == $color) {				break;			} elseif ($gameinfo[$key][0] != $color) {				if ($pce == "Q" || ($pce == "B") || ($i == 1 && $pce == "K")) {					return false;				} else {					break;				}			} 		}	}		// Check horizontally left	if ($move_aN > 1){		for ($i = 1; $i < $move_aN; $i++){			$key = $alpha[$move_aN-$i].$move_n;			$pce = $gameinfo[$key][1];			if (!isset($gameinfo[$key])){				continue;			} elseif ($gameinfo[$key][0] == $color) {				break;			} elseif ($gameinfo[$key][0] != $color) {				if ($pce == "Q" || ($pce == "R") || ($i == $move_aN-1 && $pce == "K")) {					return false;				} else {					break;				}			}		}	}		// Check diagonally left-down	if ($move_aN > 1 && $move_n < 8){		for ($i = 1; $i < 8; $i++){			if ($move_aN-$i < 1 || $move_n+$i > 8) break;			$key = $alpha[$move_aN-$i].($move_n+$i);			$pce = $gameinfo[$key][1];			if (!isset($gameinfo[$key])){				continue;			} elseif ($gameinfo[$key][0] == $color) {				break;			} elseif ($gameinfo[$key][0] != $color) {				if ($pce == "Q" || ($pce == "B") || ($i == 1 && $pce == "K") || ($i == 1 && $pce == "P")) {					return false;				} else {					break;				}			} 		}	}		// Check vertically down	if ($move_n < 8){		for ($i = $move_n+1; $i < 9; $i++){			$key = $move_a.$i;			$pce = $gameinfo[$key][1];			if (!isset($gameinfo[$key])){				continue;			} elseif ($gameinfo[$key][0] == $color) {				break;			} elseif ($gameinfo[$key][0] != $color) {				if ($pce == "Q" || ($pce == "R") || ($i == $move_aN-1 && $pce == "K")) {					return false;				} else {					break;				}			}		}	}		// Check diagonally right-down	if ($move_aN < 8 && $move_n < 8){		for ($i = 1; $i < 8; $i++){			if ($move_aN+$i > 8 || $move_n+$i > 8) break;			$key = $alpha[$move_aN+$i].($move_n+$i);			$pce = $gameinfo[$key][1];			if (!isset($gameinfo[$key])){				continue;			} elseif ($gameinfo[$key][0] == $color) {				break;			} elseif ($gameinfo[$key][0] != $color) {				if ($pce == "Q" || ($pce == "B") || ($i == 1 && $pce == "K") || ($i == 1 && $pce == "P")) {					return false;				} else {					break;				}			}		}	}		// Check horizontally right	if ($move_aN < 8){		for ($i = 1; $i < 9-$move_aN; $i++){			$key = $alpha[$move_aN+$i].$move_n;			$pce = $gameinfo[$key][1];			if (!isset($gameinfo[$key])){				continue;			} elseif ($gameinfo[$key][0] == $color) {				break;			} elseif ($gameinfo[$key][0] != $color) {				if ($pce == "Q" || ($pce == "R") || ($i == $move_aN-1 && $pce == "K")) {					return false;				} else {					break;				}			}		}	}		// Check diagonally right-up	if ($move_aN < 8 && $move_n > 1){		for ($i = 1; $i < 8; $i++){			if ($move_aN+$i > 8 || $move_n-$i < 1) break;			$key = $alpha[$move_aN+$i].($move_n-$i);			$pce = $gameinfo[$key][1];			if (!isset($gameinfo[$key])){				continue;			} elseif ($gameinfo[$key][0] == $color) {				break;			} elseif ($gameinfo[$key][0] != $color) {				if ($pce == "Q" || ($pce == "B") || ($i == 1 && $pce == "K") || ($i == 1 && $pce == "P")) {					return false;				} else {					break;				}			}		}	}		return true;}?>